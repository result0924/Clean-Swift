//
//  WisdomViewControllerTests.swift
//  RealtimeTrafficInfomation
//
//  Created by justin on 2019/6/19.
//  Copyright (c) 2019 jlai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import RealtimeTrafficInfomation
import XCTest

class WisdomViewControllerTests: XCTestCase {
    // MARK: Subject under test
  
    var sut: WisdomViewController!
    var window: UIWindow!
  
    // MARK: Test lifecycle
  
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupWisdomViewController()
    }
  
    override func tearDown() {
        window = nil
        super.tearDown()
    }
  
    // MARK: Test setup
  
    func setupWisdomViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "WisdomViewController") as? WisdomViewController
    }
  
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
  
    // MARK: Test doubles
  
    class WisdomBusinessLogicSpy: WisdomBusinessLogic {
        var quote: Quote?
        
        // MARK: Method call expectations
        
        var showCalled = false
        var showOldQuoteCalled = false
        var fetchQuoteDataStoreCalled = false
    
        func show() {
            showCalled = true
        }
        
        func showOldQuote() {
            showOldQuoteCalled = true
        }
        
        func fetchQuoteDataStore() {
            fetchQuoteDataStoreCalled = true
        }
    }
  
    // MARK: Tests
  
    func testFetchQuoteWhenViewIsLoaded() {
        // Given
        let spy = WisdomBusinessLogicSpy()
        sut.interactor = spy
    
        // When
        spy.show()
        spy.showOldQuote()
        spy.fetchQuoteDataStore()
    
        // Then
        XCTAssert(spy.showCalled, "Should show right after the view appears")
        XCTAssert(spy.showOldQuoteCalled, "Should show old quote right after the view appears")
        XCTAssert(spy.fetchQuoteDataStoreCalled, "Should fetch quote right after the view appears")
    }
    
    //MARK: Test display logic
    
    func testDisplayOldQuote() {
        sut.loadView()
        sut.viewDidLoad()
        
        let viewModel = Wisdom.WisdomEvent.cachequote(quote: WisdomSeeds().testQuote)
        
        if let quote = viewModel.quote {
            sut.showView(quote: quote)
            judgeSuccessAssert(quote: quote)
            return
        }
        
        XCTAssert(false)
    }
    
    func testDisplayQuoteSuccess() {
        sut.loadView()
        sut.viewDidLoad()
        
        // Success
        var viewMode = Wisdom.WisdomEvent.ViewModel(quote: WisdomSeeds().testQuote, success: true, errorMsg: nil)
        if let quote = viewMode.quote {
            sut.showView(quote: quote)
            judgeSuccessAssert(quote: quote)
        } else {
            XCTAssert(false)
        }
        
        // Fail
        viewMode = Wisdom.WisdomEvent.ViewModel(quote: nil, success: false, errorMsg: "error")
        
        if let _ = viewMode.quote {
            XCTAssert(false)
        } else {
            sut.showFailedView(msg: "can't find quote")
            XCTAssertEqual(sut.quoteLabel.text, "can't find quote")
        }
    }
    
    func testDisplayQuoteFailed() {
        sut.loadView()
        sut.viewDidLoad()
        
        let viewMode = Wisdom.WisdomEvent.ViewModel(quote: nil, success: false, errorMsg: "error")
        sut.showFailedView(msg: viewMode.errorMsg ?? "can't fetch quote from server")
        XCTAssertEqual(sut.quoteLabel.text, viewMode.errorMsg)
    }
    
    private func judgeSuccessAssert(quote: Quote) {
        XCTAssertEqual(sut.titleLabel.text, quote.title)
        XCTAssertEqual(sut.quoteLabel.text, quote.text)
        XCTAssertEqual(sut.otherLabel.text, "Author: \(quote.author)\nDate: \(quote.date)\nCopyright: \(quote.copyright)")
    }
}
