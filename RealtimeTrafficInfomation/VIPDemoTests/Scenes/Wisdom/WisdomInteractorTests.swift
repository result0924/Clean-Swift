//
//  WisdomInteractorTests.swift
//  RealtimeTrafficInfomation
//
//  Created by justin on 2019/6/19.
//  Copyright (c) 2019 jlai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import RealtimeTrafficInfomation
import XCTest

class WisdomInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: WisdomInteractor!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupWisdomInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupWisdomInteractor() {
        sut = WisdomInteractor()
    }

    // MARK: Test doubles

    class WisdomPresentationLogicSpy: WisdomPresentationLogic {

        var presentQuoteResultSuccessCalled = false
        var presentQuoteResultFailCalled = false
        var presentOldQuoteResultCalled = false

        func presentQuoteResult(response: Wisdom.WisdomEvent.Response) {
            if response.quote != nil {
                presentQuoteResultSuccessCalled = true
            } else {
                presentQuoteResultFailCalled = true
            }
        }
        
        func presentOldQuoteResult(response: Wisdom.WisdomEvent.cachequote) {
            presentOldQuoteResultCalled = true
        }
    }

    // MARK: Tests
    
    func testPresentQuoteSuccessResult() {
        // Given
        let presenterSpy = WisdomPresentationLogicSpy()
        
        sut.presenter = presenterSpy
        
        // When
        presenterSpy.presentQuoteResult(response: Wisdom.WisdomEvent.Response(quote: WisdomSeeds().testQuote, success: true, errorMsg: nil))
        
        // Then
        XCTAssertTrue(presenterSpy.presentQuoteResultSuccessCalled, "present quote success should ask the presenter to format the result")
    }

    func testPresentQuoteFailResult() {
        // Given
        let presenterSpy = WisdomPresentationLogicSpy()
        
        sut.presenter = presenterSpy

        // When
        presenterSpy.presentQuoteResult(response: Wisdom.WisdomEvent.Response(quote: nil, success: false, errorMsg: "error"))

        // Then
        XCTAssertTrue(presenterSpy.presentQuoteResultFailCalled, "present quote fail should ask the presenter to format the result")
    }
    
    func testPresentOldQuoteResult() {
        // Given
        let presenterSpy = WisdomPresentationLogicSpy()
        
        sut.presenter = presenterSpy
        
        // When
        presenterSpy.presentOldQuoteResult(response: Wisdom.WisdomEvent.cachequote(quote: WisdomSeeds().testQuote))
        
        // Then
        XCTAssertTrue(presenterSpy.presentOldQuoteResultCalled, "present old quote should ask the presenter to format the result")
    }
    
}
