//
//  WisdomWorker.swift
//  RealtimeTrafficInfomation
//
//  Created by justin on 2019/6/6.
//  Copyright (c) 2019 jlai. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData
import Alamofire

typealias responseHandler = (_ response: Wisdom.WisdomEvent.Response) -> ()

class WisdomNetWorker {
    let quoteUrl = "http://quotes.rest/qod.json"
    
    func fetchQuote(complete: @escaping responseHandler) {
        Alamofire.request(quoteUrl).validate().responseJSON { (response) in
            if response.result.isSuccess {
                
                if let JSON = response.result.value, let jsonDictionary = JSON as? NSDictionary, let contents: [String: Any] = jsonDictionary["contents"] as? [String: Any], let quotes: [[String: Any]] = contents["quotes"] as? [[String: Any]] {
                    let quote: Quote = Quote(text: quotes.first?["quote"] as? String ?? "", author: quotes.first?["author"] as? String ?? "", title: quotes.first?["title"] as? String ?? "", date: quotes.first?["date"] as? String ?? "", image: quotes.first?["background"] as? String ?? "", copyright: contents["copyright"] as? String ?? "")
                    
                    let wisdomResponse: Wisdom.WisdomEvent.Response = Wisdom.WisdomEvent.Response(quote: quote, success: true, errorMsg: nil)
                    complete(wisdomResponse)
                } else {
                    let wisdomResponse: Wisdom.WisdomEvent.Response = Wisdom.WisdomEvent.Response(quote: nil, success:false, errorMsg: "can't decode quote json")
                    complete(wisdomResponse)
                }
                
            } else {
                let wisdomResponse: Wisdom.WisdomEvent.Response = Wisdom.WisdomEvent.Response(quote: nil, success:false, errorMsg: response.result.error.debugDescription)
                complete(wisdomResponse)
            }
        }
    }
}

class WisdomDatabaseWorker {
    func saveQuote(_ response: Wisdom.WisdomEvent.Response) {
        if let quote = response.quote {
            let predicate = NSPredicate(format: "text = %@", String(quote.text))
            let existsQuoteModel = getQuoteByPredicate(predicate)
            let context = Utils.coreDataContext
            
            if existsQuoteModel == nil, let entity = NSEntityDescription.entity(forEntityName: "Quotes", in: context) {
                let newQuote = Quotes(entity: entity, insertInto: context)
                newQuote.title = quote.title
                newQuote.text = quote.text
                newQuote.author = quote.author
                newQuote.date = quote.date
                newQuote.copyright = quote.copyright
                newQuote.image = quote.image
                
                do {
                    try context.save()
                } catch let error as NSError {
                    print("Could not create quote to core data \(error), \(error.userInfo)")
                }
            } else {
                let request = NSFetchRequest<Quotes>(entityName: "Quotes")
                request.predicate = predicate
                
                do {
                    let results = try context.fetch(request)
                    
                    if !results.isEmpty, let oldQuote = results.first {
                        oldQuote.title = quote.title
                        oldQuote.text = quote.text
                        oldQuote.author = quote.author
                        oldQuote.date = quote.date
                        oldQuote.copyright = quote.copyright
                        oldQuote.image = quote.image
                        
                        do {
                            try context.save()
                        } catch let error as NSError {
                            print("Could not save quote to core data \(error), \(error.userInfo)")
                        }
                    }
                } catch {
                    print("Unexpected error: \(error).")
                }
            }
        }
    }
    
    func fetchQuoteFromDatabase() -> [Quote] {
        let context = Utils.coreDataContext
        let request = NSFetchRequest<Quotes>(entityName: "Quotes")
        request.sortDescriptors = [NSSortDescriptor(key: "date", ascending: true)]
        
        do {
            let results = try context.fetch(request)
            
            let quotes: [Quote] = results.compactMap { return convertQuoteResultToModel($0) }
            return quotes
        } catch let error as NSError {
            print("Could not get quote \(error), \(error.userInfo)")
            return []
        }
    }
    
    private func getQuoteByPredicate(_ predicate: NSPredicate) -> Quote? {
        let context = Utils.coreDataContext
        let request = NSFetchRequest<Quotes>(entityName: "Quotes")
        
        request.predicate = predicate
        do {
            let results = try context.fetch(request)
            
            if let quote = results.first {
                return convertQuoteResultToModel(quote)
            } else {
                return nil
            }
        } catch {
            print("Unexpected error: \(error).")
            return nil
        }
    }
    
    private func convertQuoteResultToModel(_ result: Quotes) -> Quote? {
        
        let obj: [String: Any?] = [
            "text": result.text,
            "title": result.title,
            "author": result.author,
            "date": result.date,
            "copyright": result.copyright,
            "image": result.image
        ]
        
        if let jsonData = try? JSONSerialization.data(withJSONObject: obj, options: .prettyPrinted) {
            let decoder = JSONDecoder()
            
            do {
                let quote = try decoder.decode(Quote.self, from: jsonData)
                return quote
            } catch(let error) {
                print("decode json data error when cover quote to model: \(error)")
                return nil
            }
            
        } else {
            print("cover obj to data fail: \(obj)")
            return nil
        }
    }
}
